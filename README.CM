http://localhost:8080/druid/index.html

针对三种控制器的访问分别为：

视图：

http://localhost:8080/hello?name=7player

Json：

http://localhost:8080/getUserInfo

Restful（使用了swagger）：

http://localhost:8080/swagger/index.html





附录：
Spring Boot 推荐的基础 POM 文件

名称

说明

spring-boot-starter	核心 POM，包含自动配置支持、日志库和对 YAML 配置文件的支持。

spring-boot-starter-amqp	通过 spring-rabbit 支持 AMQP。

spring-boot-starter-aop	包含 spring-aop 和 AspectJ 来支持面向切面编程（AOP）。

spring-boot-starter-batch 支持 Spring Batch，包含 HSQLDB。

spring-boot-starter-data-jpa

包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。

spring-boot-starter-data-mongodb 

包含 spring-data-mongodb 来支持 MongoDB。

spring-boot-starter-data-rest

通过 spring-data-rest-webmvc 支持以 REST 方式暴露 Spring Data 仓库。

spring-boot-starter-jdbc

支持使用 JDBC 访问数据库。

spring-boot-starter-security

包含 spring-security。

spring-boot-starter-test

包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。 

spring-boot-starter-velocity

支持使用 Velocity 作为模板引擎。

spring-boot-starter-web

支持 Web 应用开发，包含 Tomcat 和 spring-mvc。

spring-boot-starter-websocket

支持使用 Tomcat 开发 WebSocket 应用。

spring-boot-starter-ws

支持 Spring Web Services。

spring-boot-starter-actuator

添加适用于生产环境的功能，如性能指标和监测等功能。

spring-boot-starter-remote-shell

添加远程 SSH 支持。

spring-boot-starter-jetty

使用 Jetty 而不是默认的 Tomcat 作为应用服务器。

spring-boot-starter-log4j

添加 Log4j 的支持。

spring-boot-starter-logging

使用 Spring Boot 默认的日志框架 Logback。

spring-boot-starter-tomcat

使用 Spring Boot 默认的 Tomcat 作为应用服务器。




一对多：
user-article
1、Model
User:
private List<Article> articles;

2、Mapper
UserMapper:
public List<User> findUserList(User user);

ArticleMapper:
public List<Article> findArticleByUserId();

3、UserMapper.xml

	<!-- 公用查询条件 -->
	<sql id="selectCondition">
		<where>
			<if test="null != userName and '' != userName">
				u.user_Name like CONCAT('%','${userName}','%')
			</if>
			<if test="null != phoneNumber and '' != phoneNumber">
				and u.phone_Number like CONCAT('%','${phoneNumber}','%')
			</if>
			<if test="null != age">
				and u.age = #{age}
			</if>
		</where>
	</sql>
	
	<!-- 返回的结果集 -->
	<resultMap type="com.billow.model.User" id="result_base">
		<id column="user_Id" property="userId" />
		<result column="user_Name" property="userName" />
		<result column="age" property="age" />
		<result column="phone_Number" property="phoneNumber" />
		<result column="password" property="password" />
	</resultMap>
	
		<!-- 返回的结果集 -->
	<resultMap id="result" extends="result_base" type="com.billow.model.User">
		<!-- 级联查询出文章(一对多，一对一使用select) -->
		<collection property="articles" javaType="ArrayList"
			column="user_id" ofType="com.billow.model.Article"
			select="com.billow.mapper.ArticleMapper.findArticleByUserId" />
	</resultMap>

	<!-- 关联查询：关联字段user中的别名userid要与article中的userid相同 -->
	<select id="findUserList" resultMap="result" parameterType="com.billow.model.User">
		select
		u.user_id,u.user_Name,u.age,u.phone_Number,u.password from
		t_user u
		<include refid="selectCondition" />
	</select>


多对多：
user-role
1、Model
User:
private List<Role> roles;

2、Mapper
public User findUserById(int userId);

3、UserMapper.xml
<!-- 公用查询条件 -->
	<sql id="selectCondition">
		<where>
			<if test="null != userName and '' != userName">
				u.user_Name like CONCAT('%','${userName}','%')
			</if>
			<if test="null != phoneNumber and '' != phoneNumber">
				and u.phone_Number like CONCAT('%','${phoneNumber}','%')
			</if>
			<if test="null != age">
				and u.age = #{age}
			</if>
		</where>
	</sql>
	
	<!-- 返回的结果集 -->
	<resultMap type="com.billow.model.User" id="result_base">
		<id column="user_Id" property="userId" />
		<result column="user_Name" property="userName" />
		<result column="age" property="age" />
		<result column="phone_Number" property="phoneNumber" />
		<result column="password" property="password" />
	</resultMap>
	
		<!-- 返回的结果集 -->
	<resultMap id="result" extends="result_base" type="com.billow.model.User">
		<!-- 级联查询出文章(一对多，一对一使用select) -->
		<collection property="roles" ofType="com.billow.model.Role">
			<id column="roleId" property="id" jdbcType="INTEGER" />
			<result column="rolename" property="rolename" jdbcType="VARCHAR" />
		</collection>
	</resultMap>

	<select id="findUserById" resultMap="result">
		select
		r.*,ur.user_id as
		u_id,ur.role_id,tr.id as roleId,tr.rolename
		from t_user r
		left
		join
		t_user_role ur on r.user_id =
		ur.user_id left join t_role tr on
		ur.role_id
		= tr.id
		where r.user_Id =
		#{userid};
	</select>






































	
	
	
	
	
	

	